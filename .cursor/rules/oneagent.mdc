---
alwaysApply: true
---

# Wealth Portal MCP Server - Cursor Rules

## Project Overview

This is an MCP (Model Context Protocol) server for wealth management portal operations via GraphQL. The server provides specific, purpose-built tools for portal operations rather than generic GraphQL tools.

## Key Files

- `src/index.ts` - Main server entry point
- `src/tools/` - MCP tool implementations
- `src/config/` - Configuration management
- `.env.local` - Server configuration (gitignored)

## Architecture

- **Specific Tools Only**: Each tool has a clear, specific purpose
- **Portal Tools**: High-level portal configuration CRUD operations
- **Config Tools**: Server configuration management
- **Type Safety**: Full TypeScript with Zod validation
- **Node.js 22+**: Requires Node.js 22.0.0 or higher

## Development Guidelines

1. Always use TypeScript with strict mode
2. Validate all inputs with Zod schemas
3. Handle errors gracefully with descriptive messages
4. Use async/await for all async operations
5. Follow the existing tool pattern for new tools
6. **CRITICAL**: Create specific, purpose-built tools only - NO generic GraphQL tools

## Tool Philosophy

- **Specific Over Generic**: Each tool should have a clear, single responsibility
- **No Generic GraphQL**: Never create generic `graphql_query`, `graphql_mutation`, or `graphql_introspect` tools
- **Purpose-Built**: Tools should be designed for specific business operations
- **Clear Naming**: Tool names should clearly indicate their specific purpose

## Available Tools

- `update_organization_theme` - Organization branding and theme management
- `upload_file` - General file uploads (documents, user avatars)
- `view_pdf` - PDF content extraction and viewing
- `config_status` - Server configuration status
- `config_set` - Server configuration updates

## Tool Selection Guidelines

**For Organization Logos:**

- ✅ ALWAYS use `update_organization_theme` - handles logo upload + org update
- ❌ NEVER use `upload_file` for org logos - only creates file record

**For General Files:**

- ✅ Use `upload_file` for documents, user avatars, general images
- ❌ Don't use `update_organization_theme` for non-branding files

## Adding New Tools

When adding new tools:

1. **Be Specific**: Each tool should have one clear purpose
2. **No Generic GraphQL**: Never create generic query/mutation tools
3. **Business-Focused**: Tools should solve specific business problems
4. **Clear Naming**: Use descriptive names that indicate the tool's purpose
5. **Proper Validation**: Use Zod schemas for all input validation
6. **Error Handling**: Include comprehensive error handling

## Error Handling

- All tools return structured error responses
- GraphQL errors include context and suggestions
- Configuration errors are validated before saving
- Network errors include retry information

## Configuration

- **NEVER create config.json files** - This project uses .env.local for configuration
- Configuration is managed via environment variables in .env.local
- Organization ID and User ID are read from .env.local
- Use `config_set` tool to update configuration via MCP

## Testing

- Use `npm run dev` for development with hot reload
- Use `npm run build && npm start` for production
- Check `.env.local` exists and is valid before running
- Use `config_set` tool to update configuration via MCP
- **Requires Node.js 22.0.0 or higher**

## CRITICAL: Loop Prevention Rules

### When Using MCP Tools
**STOP IMMEDIATELY** if you encounter any of these scenarios:

1. **"LOOP DETECTED" Error Messages**
   - If you see "LOOP DETECTED: This tool has failed X times..." 
   - **DO NOT** attempt to call the same tool again
   - **DO NOT** try to "fix" the parameters and retry
   - **STOP** and apologize to the user

2. **Repeated Validation Failures**
   - If the same tool fails 2+ times with similar validation errors
   - **DO NOT** keep trying with the same approach
   - **ASK** the user for clarification or different parameters

3. **Missing Required Parameters**
   - If a tool consistently fails due to missing required parameters
   - **DO NOT** keep guessing or using placeholder values
   - **ASK** the user to provide the missing information

### Required Response Pattern
When you detect a loop or repeated failures:

```
I apologize, but I'm unable to complete this task. The tool has failed multiple times with similar errors, indicating I may be missing required information or using incorrect parameters.

To help me assist you better, could you please:
1. [Specific guidance based on the error]
2. [Alternative approach or different parameters needed]

I want to avoid wasting your time with repeated failed attempts.
```

### What NOT to Do
- ❌ **NEVER** retry the same tool call after 2+ failures
- ❌ **NEVER** ignore "LOOP DETECTED" error messages
- ❌ **NEVER** keep trying with placeholder or guessed values
- ❌ **NEVER** attempt to "fix" parameters without user input
- ❌ **NEVER** continue trying the same approach indefinitely

### What TO Do
- ✅ **STOP** after 2 failed attempts with similar errors
- ✅ **APOLOGIZE** to the user for the difficulty
- ✅ **ASK** for clarification or different parameters
- ✅ **SUGGEST** alternative approaches
- ✅ **EXPLAIN** what information you need to proceed